Code (dashboard 1 - midterm)

#clustered bar chart
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
#sort data in descending order
sample_data_sorted_desc= sample_data.sort_values('midterm',ascending=False)
#specify width and height of figure
plt.figure(figsize = (13,7))
plt.bar('studID', 'midterm', data=sample_data_sorted_desc)
plt.title('Average of Midterm by StudId')
plt.xlabel('Student Id', size=15)
plt.ylabel('Average of midterm', size=15)
plt.legend(labels = ['Average midterm'])
#display plot
plt.show()

#piechart
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
mean1 = sample_data['midterm'].mean()
groupby_mean1 = sample_data.groupby(['Programme']).mean()
print ('Mean midterm: ' + str(mean1))
Programme_data = sample_data["Programme"]
midterm_data = sample_data["midterm"]
plt.show()
print(groupby_mean1)
#Output the figure of piechart
# Import libraries
import numpy as np
import matplotlib.pyplot as plt
# Creating dataset
programme = ['IA', 'IB', 'CS']
data = [48.77, 30.57, 57.24]
# Creating explode data
explode = (0.1, 0.0, 0.2)
# Creating color parameters
colors = ( "orange", "cyan", "brown")
# Wedge properties
wp = { 'linewidth' : 1, 'edgecolor' : "green" }
# Creating autocpt arguments
def func(pct, allvalues):
    absolute = int(pct / 100.*np.sum(allvalues))
    return "{:.1f}%\n({:d} g)".format(pct, absolute)
# Creating plot
fig, ax = plt.subplots(figsize =(10, 7))
wedges, texts, autotexts = ax.pie(data,
                                  autopct = lambda pct: func(pct, data),
                                  explode = explode,
                                  labels = programme,
                                  shadow = True,
                                  colors = colors,
                                  startangle = 90,
                                  wedgeprops = wp,
                                  textprops = dict(color ="magenta")) 
# Adding legend
ax.legend(wedges, programme,
          title ="Programmes",
          loc ="center left",
          bbox_to_anchor =(1, 0, 0.5, 1))
 
plt.setp(autotexts, size = 8, weight ="bold")
ax.set_title("The Average of midterm by programmes")
 
# show plot
plt.show()

#studentaboveOrEqualTo50
import pandas as pd
dataframe = pd.read_csv('Sample_data_for_a_sample_course.csv', usecols = ['studID','midterm', 'Programme'], low_memory = False)
dataframe.head()
print(
   dataframe[
       (dataframe['midterm'] >= 50) 
   ]
)

#studentbelow50
import pandas as pd
dataframe = pd.read_csv('Sample_data_for_a_sample_course.csv', usecols = ['studID','midterm', 'Programme'], low_memory = False)
dataframe.head()
print(
   dataframe[
       (dataframe['midterm'] < 50) 
   ]

)

#Count of midterm by gender
import pandas as pd
data = pd.read_csv('Sample_data_for_a_sample_course.csv')
data.info()
data['Gender'].value_counts(ascending=False)
Gender = ['Male','Female']
Midterm = [154, 85]
plt.barh(Gender, Midterm, color=['blue', 'red'])
plt.title('Count of midterm by gender')
plt.ylabel('Gender')
plt.xlabel('Count of midterm')
plt.show()

#Scatter chart
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
mean1 = sample_data['midterm'].mean()
groupby_mean1 = sample_data.groupby(['Gender']).mean()
print ('Mean midterm: ' + str(mean1))
Programme_data = sample_data["Gender"]
midterm_data = sample_data["midterm"]
plt.show()
print(groupby_mean1)
x = ['female', 'male']
y = [54.63, 54.27]
plt.title('Average of Midterm by Gender')
plt.xlabel('Gender', size=15)
plt.ylabel('Average of midterm', size=15)
plt.scatter(x, y, color=['red', 'blue'])
plt.show()

#Area chart
import matplotlib.pyplot as plt
# line 1 points
x1 = ['CS', 'IA', 'IB']
y1 = [56.73, 49.39, 26.80]
# plotting the line 1 points 
plt.plot(x1, y1, label = "Male")
# line 2 points
x2 = ['CS', 'IA', 'IB']
y2 = [58.10,45,32.67]
# plotting the line 2 points 
plt.plot(x2, y2, label = "Female")
plt.xlabel('Programme')
# Set the y axis label of the current axis.
plt.ylabel('Average of midterm')
# Set a title of the current axes.
plt.title('Average of midterm by programme and gender')
# show a legend on the plot
plt.legend()
# Display a figure.
plt.show()

#Treemap
import pandas as pd
data = pd.read_csv('Sample_data_for_a_sample_course.csv')
data.info()
data['Programme'].value_counts(ascending=False)
pip install squarify
import matplotlib.pyplot as plt
import squarify 
sizes=[189, 36, 14]
label=["CS", "IA", "IB"]
squarify.plot(sizes=sizes, label=label, alpha=0.6 )
plt.title('Average of Midterm by Programme')
plt.axis('off')
plt.show()



Code (dashboard 2 - practical)

#Bar chart
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
#clustered bar chart
#sort data in descending order
sample_data_sorted_desc= sample_data.sort_values('Practical',ascending=False)
#specify width and height of figure
plt.figure(figsize = (13,7))
plt.bar('studID', 'Practical', data=sample_data_sorted_desc, color = ['maroon'])
plt.title('Average of Practical by StudId')
plt.xlabel('Student Id', size=15)
plt.ylabel('Average of practical', size=15)
plt.legend(labels = ['Average practical'])
#display plot
plt.show()

#Pie chart
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
mean1 = sample_data['Practical'].mean()
groupby_mean1 = sample_data.groupby(['Programme']).mean()
print ('Mean practical: ' + str(mean1))
Programme_data = sample_data["Programme"]
practical_data = sample_data["Practical"]
plt.show()
print(groupby_mean1)
#Output the figure of piechart
# Import libraries
import numpy as np
import matplotlib.pyplot as plt
# Creating dataset
programme = ['IA', 'IB', 'CS']
data = [41.69, 44.28, 62.91]

# Creating explode data
explode = (0.1, 0.0, 0.2)
# Creating color parameters
colors = ( "blue", "yellow", "brown")
# Wedge properties
wp = { 'linewidth' : 1, 'edgecolor' : "green" }
# Creating autocpt arguments
def func(pct, allvalues):
    absolute = int(pct / 100.*np.sum(allvalues))
    return "{:.1f}%\n({:d} g)".format(pct, absolute)
# Creating plot
fig, ax = plt.subplots(figsize =(10, 7))
wedges, texts, autotexts = ax.pie(data,
                                  autopct = lambda pct: func(pct, data),
                                  explode = explode,
                                  labels = programme,
                                  shadow = True,
                                  colors = colors,
                                  startangle = 90,
                                  wedgeprops = wp,
                                  textprops = dict(color ="magenta"))
# Adding legend
ax.legend(wedges, programme,
          title ="Programmes",
          loc ="center left",
          bbox_to_anchor =(1, 0, 0.5, 1))
 
plt.setp(autotexts, size = 8, weight ="bold")
ax.set_title("The Average of practical by programmes")
 
# show plot
plt.show()


#Bar chart for practical by gender
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
mean1 = sample_data['Practical'].mean()
groupby_mean1 = sample_data.groupby(['Gender']).mean()
print ('Mean midterm: ' + str(mean1))
Programme_data = sample_data["Gender"]
midterm_data = sample_data["Practical"]
plt.show()
print(groupby_mean1)
x = ['female', 'male']
y = [58, 59]
plt.title('Average of Practical by Gender')
plt.xlabel('Gender', size=15)
plt.ylabel('Average of practical', size=15)
plt.bar(x, y, color=['red', 'blue'])
plt.show()

#Horizontal bar chart
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
max1 = sample_data['Practical'].max()
groupby_max1 = sample_data.groupby(['Programme']).max()
print ('Max practical: ' + str(max1))
Programme_data = sample_data["Programme"]
practical_data = sample_data["Practical"]
plt.show()
print(groupby_max1)
x = ['CS', 'IA', 'IB']
y = [98, 73, 72.5]
plt.title('Max of Practical by Programme')
plt.xlabel('Programme', size=15)
plt.ylabel('Max of Practical Test', size=15)
plt.barh(x, y, color=['orange', 'blue', 'yellow'])
plt.show()

#Funnel
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
max1 = sample_data['Practical'].max()
groupby_max1 = sample_data.groupby(['Gender']).max()
print ('Max practical: ' + str(max1))
Gender_data = sample_data["Gender"]
practical_data = sample_data["Practical"]
plt.show()
print(groupby_max1)

!pip install plotly
import plotly.express as px
data = dict(
    practical=[98, 98],
    gender=["Male", "Female"])
fig = px.funnel(data, x='practical', y='gender', color = ['blue', 'red'])
fig.update_layout(
    title={
    'text' : "Max of Practical Test by Gender",
    'y': 0.9,
    'x': 0.5,
    'xanchor': 'center',
    'yanchor': 'top'})
fig.show()

#who pass practical over or equal 50 marks
import pandas as pd
dataframe = pd.read_csv('Sample_data_for_a_sample_course.csv', usecols = ['Gender','Practical', 'Programme'], low_memory = False)
dataframe.head()
print(
   dataframe[
       (dataframe['Practical'] >= 50) 
   ]
)

#who fail practical below 50
import pandas as pd
dataframe = pd.read_csv('Sample_data_for_a_sample_course.csv', usecols = ['Gender','Practical', 'Programme'], low_memory = False)
dataframe.head()
print(
   dataframe[
       (dataframe['Practical'] < 50) 
   ]
)

#Treemap
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
median1 = sample_data['Practical'].median()
groupby_median1 = sample_data.groupby(['Programme']).median()
print ('Median practical: ' + str(median1))
Programme_data = sample_data["Programme"]
practical_data = sample_data["Practical"]
plt.show()
print(groupby_median1)
import matplotlib.pyplot as plt
import squarify 
sizes=[63.5, 44, 38.5]
label=["CS", "IA", "IB"]
squarify.plot(sizes=sizes, label=label, alpha=0.6 )
plt.title('Median of Practical by Programme')
plt.axis('off')
plt.show()

Code (dashboard 3 - Assignment)

#clustered bar chart
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
#sort data in descending order
sample_data_sorted_desc= sample_data.sort_values('Assignment',ascending=False)
#specify width and height of figure
plt.figure(figsize = (13,7))
plt.bar('studID', 'Assignment', data=sample_data_sorted_desc)
plt.title('Average of Assignment by StudId')
plt.xlabel('Student Id', size=15)
plt.ylabel('Average of Assignment', size=15)
plt.legend(labels = ['Average Assignment'])
#display plot
plt.show()


#PieChart
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
mean1 = sample_data['Assignment'].mean()
groupby_mean1 = sample_data.groupby(['Programme']).mean()
print ('Mean assignment: ' + str(mean1))
Programme_data = sample_data["Programme"]
assignment_data = sample_data["Assignment"]
plt.show()
print(groupby_mean1)
#Output the figure of piechart
# Import libraries
import numpy as np
import matplotlib.pyplot as plt
# Creating dataset
programme = ['IA', 'IB', 'CS']
data = [69.69, 71.21, 72.18]
# Creating explode data
explode = (0.1, 0.0, 0.2)
# Creating color parameters
colors = ( "yellow", "green", "brown")
# Wedge properties
wp = { 'linewidth' : 1, 'edgecolor' : "green" }
# Creating autocpt arguments
def func(pct, allvalues):
    absolute = int(pct / 100.*np.sum(allvalues))
    return "{:.1f}%\n({:d} g)".format(pct, absolute)
# Creating plot
fig, ax = plt.subplots(figsize =(10, 7))
wedges, texts, autotexts = ax.pie(data,
                                  autopct = lambda pct: func(pct, data),
                                  explode = explode,
                                  labels = programme,
                                  shadow = True,
                                  colors = colors,
                                  startangle = 90,
                                  wedgeprops = wp,
                                  textprops = dict(color ="magenta")) 
# Adding legend
ax.legend(wedges, programme,
          title ="Programmes",
          loc ="center left",
          bbox_to_anchor =(1, 0, 0.5, 1))
 
plt.setp(autotexts, size = 8, weight ="bold")
ax.set_title("The Average of assignment by programmes")
 
# show plot
plt.show()


#vertical bar graph
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
mean1 = sample_data['Assignment'].mean()
groupby_mean1 = sample_data.groupby(['Gender']).mean()
print ('Mean assignment: ' + str(mean1))
Programme_data = sample_data["Gender"]
assignment_data = sample_data["Assignment"]
plt.show()
print(groupby_mean1)
x = ['female', 'male']
y = [71.65, 71.81]
plt.title('Average of Assignment by Gender')
plt.xlabel('Gender', size=15)
plt.ylabel('Average of assignment', size=15)
plt.bar(x, y, color=['red', 'blue'])
plt.show()


#who pass practical over or equal 50 marks
import pandas as pd
dataframe = pd.read_csv('Sample_data_for_a_sample_course.csv', usecols = ['Gender','Assignment', 'Programme'], low_memory = False)
dataframe.head()
print(
   dataframe[
       (dataframe['Assignment'] >= 50) 
   ]
)


#Horizontal bar chart
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
max1 = sample_data['Assignment'].max()
groupby_max1 = sample_data.groupby(['Programme']).max()
print ('Max assignment: ' + str(max1))
Programme_data = sample_data["Programme"]
assignment_data = sample_data["Assignment"]
plt.show()
print(groupby_max1)
x = ['CS', 'IA', 'IB']
y = [84, 80, 77]
plt.title('Max of Assignment by Programme')
plt.xlabel('Programme', size=15)
plt.ylabel('Max of Assignment Test', size=15)
plt.barh(x, y, color=['orange', 'blue', 'yellow'])
plt.show()


#Horizontal bar chart
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
min1 = sample_data['Assignment'].min()
groupby_min1 = sample_data.groupby(['Programme']).min()
print ('Min assignment: ' + str(min1))
Programme_data = sample_data["Programme"]
assignment_data = sample_data["Assignment"]
plt.show()
print(groupby_min1)
x = ['CS', 'IA', 'IB']
y = [64, 63, 63]
plt.title('Min of Assignment by Programme')
plt.xlabel('Programme', size=15)
plt.ylabel('Min of Assignment Test', size=15)
plt.barh(x, y, color=['orange', 'blue', 'yellow'])
plt.show()


#Treemap
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
median1 = sample_data['Assignment'].median()
groupby_median1 = sample_data.groupby(['Programme']).median()
print ('Median practical: ' + str(median1))
Programme_data = sample_data["Programme"]
assignment_data = sample_data["Assignment"]
plt.show()
print(groupby_median1)
import matplotlib.pyplot as plt
import squarify 
sizes=[72, 70, 71]
label=["CS", "IA", "IB"]
squarify.plot(sizes=sizes, label=label, alpha=0.6 )
plt.title('Median of Assignment by Programme')
plt.axis('off')
plt.show()


#Funnel
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
max1 = sample_data['Assignment'].max()
groupby_max1 = sample_data.groupby(['Gender']).max()
print ('Max assignment: ' + str(max1))
Gender_data = sample_data["Gender"]
assignment_data = sample_data["Assignment"]
plt.show()
print(groupby_max1)

!pip install plotly
import plotly.express as px
data = dict(
    Assignment=[84, 82],
    gender=["Male", "Female"])
fig = px.funnel(data, x='Assignment', y='gender', color = ['male', 'female'])
fig.update_layout(
    title={
    'text' : "Max of Assignment by Gender",
    'y': 0.9,
    'x': 0.5,
    'xanchor': 'center',
    'yanchor': 'top'})
fig.show()


Code (dashboard 4 - Final score)

#clustered bar chart
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
#sort data in descending order
sample_data_sorted_desc= sample_data.sort_values('Final score',ascending=False)
#specify width and height of figure
plt.figure(figsize = (13,7))
plt.bar('studID', 'Final score', data=sample_data_sorted_desc)
plt.title('Average of Final score by StudId')
plt.xlabel('Student Id', size=15)
plt.ylabel('Average of Final score', size=15)
plt.legend(labels = ['Average Final Score'])
#display plot
plt.show()

#PieChart
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
mean1 = sample_data['Final score'].mean()
groupby_mean1 = sample_data.groupby(['Programme']).mean()
print ('Mean final score: ' + str(mean1))
Programme_data = sample_data["Programme"]
finalScore_data = sample_data["Final score"]
plt.show()
print(groupby_mean1)
#Output the figure of piechart
# Import libraries
import numpy as np
import matplotlib.pyplot as plt
# Creating dataset
programme = ['IA', 'IB', 'CS']
data = [52.78, 60.02, 65.59]
# Creating explode data
explode = (0.1, 0.0, 0.2)
# Creating color parameters
colors = ( "grey", "red", "brown")
# Wedge properties
wp = { 'linewidth' : 1, 'edgecolor' : "green" }
# Creating autocpt arguments
def func(pct, allvalues):
    absolute = int(pct / 100.*np.sum(allvalues))
    return "{:.1f}%\n({:d} g)".format(pct, absolute)
# Creating plot
fig, ax = plt.subplots(figsize =(10, 7))
wedges, texts, autotexts = ax.pie(data,
                                  autopct = lambda pct: func(pct, data),
                                  explode = explode,
                                  labels = programme,
                                  shadow = True,
                                  colors = colors,
                                  startangle = 90,
                                  wedgeprops = wp,
                                  textprops = dict(color ="magenta")) 
# Adding legend
ax.legend(wedges, programme,
          title ="Programmes",
          loc ="center left",
          bbox_to_anchor =(1, 0, 0.5, 1))
 
plt.setp(autotexts, size = 8, weight ="bold")
ax.set_title("The Average of final score by programmes")
 
# show plot
plt.show()


#who pass finals over or equal 40 marks
import pandas as pd
dataframe = pd.read_csv('Sample_data_for_a_sample_course.csv', usecols = ['Gender','Final score', 'Programme'], low_memory = False)
dataframe.head()
print(
   dataframe[
       (dataframe['Final score'] >= 40) 
   ]
)


#clustered bar chart
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
#sort data in descending order
sample_data_sorted_desc= sample_data.sort_values('Final Exam Q4',ascending=False)
#specify width and height of figure
plt.figure(figsize = (13,7))
plt.bar('Programme', 'Final Exam Q4', data=sample_data_sorted_desc)
plt.title('Average of Final Exam Q4 by Programme')
plt.xlabel('Programme', size=15)
plt.ylabel('Average of Final Exam Q4', size=15)
plt.legend(labels = ['Average Final Exam Q4'])
#display plot
plt.show()


#Treemap
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
mean1 = sample_data['Final Exam Q1'].mean()
mean2 = sample_data['Final Exam Q2'].mean()
mean3 = sample_data['Final Exam Q3'].mean()
mean4 = sample_data['Final Exam Q4'].mean()
print ('Average final exam of Q1,Q2,Q3,Q4: ' + str(mean1) + str(mean2) + str(mean3) + str(mean4))
final1_data = sample_data["Final Exam Q1"]
final2_data = sample_data["Final Exam Q2"]
final3_data = sample_data["Final Exam Q3"]
final4_data = sample_data["Final Exam Q4"]
plt.show()
import matplotlib.pyplot as plt
import squarify 
sizes=[19.71, 15.36, 15.82, 12.43]
label=["Q1", "Q2", "Q3", "Q4"]
squarify.plot(sizes=sizes, label=label, alpha=0.6 )
plt.title('Average of Final exam Q1, Q2, Q3, Q4')
plt.axis('off')
plt.show()


#vertical bar graph
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
mean1 = sample_data['Final score'].mean()
groupby_mean1 = sample_data.groupby(['Gender']).mean()
print ('Mean Final score: ' + str(mean1))
Programme_data = sample_data["Gender"]
finalScore_data = sample_data["Final score"]
plt.show()
print(groupby_mean1)
x = ['female', 'male']
y = [63.92, 63.01]
plt.title('Average of Final score by Gender')
plt.xlabel('Gender', size=15)
plt.ylabel('Average of final score', size=15)
plt.bar(x, y, color=['red', 'blue'])
plt.show()


#clustered bar chart
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
#sort data in descending order
sample_data_sorted_desc= sample_data.sort_values('Final Exam Q1',ascending=False)
#specify width and height of figure
plt.figure(figsize = (13,7))
plt.bar('Programme', 'Final Exam Q1', data=sample_data_sorted_desc, color = ['green'])
plt.title('Average of Final Exam Q1 by Programme')
plt.xlabel('Programme', size=15)
plt.ylabel('Average of Final Exam Q1', size=15)
plt.legend(labels = ['Average Final Exam Q1'])
#display plot
plt.show()


#clustered bar chart
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
#sort data in descending order
sample_data_sorted_desc= sample_data.sort_values('Final Exam Q2',ascending=False)
#specify width and height of figure
plt.figure(figsize = (13,7))
plt.bar('Programme', 'Final Exam Q2', data=sample_data_sorted_desc, color = ['yellow'])
plt.title('Average of Final Exam Q2 by Programme')
plt.xlabel('Programme', size=15)
plt.ylabel('Average of Final Exam Q2', size=15)
plt.legend(labels = ['Average Final Exam Q2'])
#display plot
plt.show()

#clustered bar chart
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
#sort data in descending order
sample_data_sorted_desc= sample_data.sort_values('Final Exam Q3',ascending=False)
#specify width and height of figure
plt.figure(figsize = (13,7))
plt.bar('Programme', 'Final Exam Q3', data=sample_data_sorted_desc, color = ['brown'])
plt.title('Average of Final Exam Q3 by Programme')
plt.xlabel('Programme', size=15)
plt.ylabel('Average of Final Exam Q3', size=15)
plt.legend(labels = ['Average Final Exam Q3'])
#display plot
plt.show()


Code (dashboard 5 – final result)

#clustered bar chart
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
#sort data in descending order
sample_data_sorted_desc= sample_data.sort_values('Final result(100%)',ascending=False)
#specify width and height of figure
plt.figure(figsize = (13,7))
plt.bar('studID', 'Final result(100%)', data=sample_data_sorted_desc)
plt.title('Average of Final score by StudId')
plt.xlabel('Student Id', size=15)
plt.ylabel('Average of Final result', size=15)
plt.legend(labels = ['Average Final Result'])
#display plot
plt.show()


#PieChart
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
mean1 = sample_data['Final result(100%)'].mean()
groupby_mean1 = sample_data.groupby(['Programme']).mean()
print ('Mean final result: ' + str(mean1))
Programme_data = sample_data["Programme"]
finalScore_data = sample_data["Final result(100%)"]
plt.show()
print(groupby_mean1)
#Output the figure of piechart
# Import libraries
import numpy as np
import matplotlib.pyplot as plt
# Creating dataset
programme = ['IA', 'IB', 'CS']
data = [54.25, 54.79, 64.97]
# Creating explode data
explode = (0.1, 0.0, 0.2)
# Creating color parameters
colors = ( "grey", "red", "brown")
# Wedge properties
wp = { 'linewidth' : 1, 'edgecolor' : "green" }
# Creating autocpt arguments
def func(pct, allvalues):
    absolute = int(pct / 100.*np.sum(allvalues))
    return "{:.1f}%\n({:d} g)".format(pct, absolute)
# Creating plot
fig, ax = plt.subplots(figsize =(10, 7))
wedges, texts, autotexts = ax.pie(data,
                                  autopct = lambda pct: func(pct, data),
                                  explode = explode,
                                  labels = programme,
                                  shadow = True,
                                  colors = colors,
                                  startangle = 90,
                                  wedgeprops = wp,
                                  textprops = dict(color ="magenta")) 
# Adding legend
ax.legend(wedges, programme,
          title ="Programmes",
          loc ="center left",
          bbox_to_anchor =(1, 0, 0.5, 1))
 
plt.setp(autotexts, size = 8, weight ="bold")
ax.set_title("The Average of final result by programmes")
 
# show plot
plt.show()


#who pass finals over or equal 50 marks
import pandas as pd
dataframe = pd.read_csv('Sample_data_for_a_sample_course.csv', usecols = ['Gender','Final result(100%)', 'Programme'], low_memory = False)
dataframe.head()
print(
   dataframe[
       (dataframe['Final result(100%)'] >= 50) 
   ]
)


#who fail finals below 50 marks
import pandas as pd
dataframe = pd.read_csv('Sample_data_for_a_sample_course.csv', usecols = ['Gender','Final result(100%)', 'Programme'], low_memory = False)
dataframe.head()
print(
   dataframe[
       (dataframe['Final result(100%)'] < 50) 
   ]
)


#vertical bar graph
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
mean1 = sample_data['Final result(100%)'].mean()
groupby_mean1 = sample_data.groupby(['Gender']).mean()
print ('Mean Final result: ' + str(mean1))
Programme_data = sample_data["Gender"]
finalScore_data = sample_data["Final result(100%)"]
plt.show()
print(groupby_mean1)
x = ['female', 'male']
y = [63.03, 62.61]
plt.title('Average of Final result by Gender')
plt.xlabel('Gender', size=15)
plt.ylabel('Average of final result', size=15)
plt.bar(x, y, color=['red', 'blue'])
plt.show()


#Horizontal bar chart
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
max1 = sample_data['Final result(100%)'].min()
groupby_max1 = sample_data.groupby(['Programme']).max()
print ('Max final result: ' + str(max1))
Programme_data = sample_data["Programme"]
FinalResult_data = sample_data["Final result(100%)"]
plt.show()
print(groupby_max1)
x = ['CS', 'IA', 'IB']
y = [88.20, 63.73, 63.05]
plt.title('Max of final result by Programme')
plt.xlabel('Programme', size=15)
plt.ylabel('Max of final result', size=15)
plt.barh(x, y, color=['pink', 'purple', 'yellow'])
plt.show()


#Treemap
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
median1 = sample_data['Final result(100%)'].median()
groupby_median1 = sample_data.groupby(['Programme']).median()
print ('Median final result: ' + str(median1))
Programme_data = sample_data["Programme"]
FinalResult_data = sample_data["Final result(100%)"]
plt.show()
print(groupby_median1)
import matplotlib.pyplot as plt
import squarify 
sizes=[66.70, 56.38, 53.15]
label=["CS", "IA", "IB"]
squarify.plot(sizes=sizes, label=label, alpha=0.6 )
plt.title('Median of Final result by Programme')
plt.axis('off')
plt.show()


#vertical bar graph
import pandas as pd
from matplotlib import pyplot as plt
sample_data = pd.read_csv('Sample_data_for_a_sample_course.csv')
mean1 = sample_data['Final result(100%)'].mean()
mean2 = sample_data['Coursework(50%)'].mean()
print ('Mean Final result: ' + str(mean1))
print ('Mean Coursework: ' + str(mean2))
finalScore_data = sample_data["Final result(100%)"]
coursework_data = sample_data["Coursework(50%)"]
plt.show()
x = ['coursework', 'final exam']
y = [31.09, 31.67]
plt.title('Average of Final result and coursework')
plt.ylabel('Average of final result and coursework', size=15)
plt.bar(x, y, color=['green', 'lightgreen'])
plt.show()
